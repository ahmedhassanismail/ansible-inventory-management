pipeline {
    agent any

    parameters {
        string(name: 'OLD_JAVA_VERSION', defaultValue: 'jdk-11.0.12', description: 'Current Java version to replace in WebLogic files')
        string(name: 'NEW_JAVA_VERSION', defaultValue: 'jdk-11.0.60', description: 'New Java version to install')
        string(name: 'JAVA_INSTALLER', defaultValue: 'jdk-11.0.60-windows-x64.exe', description: 'Java installer filename (must exist in ansible_source_dir)')
        string(name: 'JAVA_INSTALL_DIR', defaultValue: 'E:\\jdk-11.0.60', description: 'Java installation directory on Windows server')
        string(name: 'ORACLE_HOME', defaultValue: 'E:\\Oracle\\Middleware\\Oracle_Home', description: 'Oracle Home directory path on Windows server')
        string(name: 'BACKUP_DIR', defaultValue: 'E:\\Oracle\\backup', description: 'Backup directory path for WebLogic files')
        string(name: 'JAVA_SOURCE_DIR', defaultValue: 'E:\\Java_source', description: 'Java source directory on Windows server')
        choice(name: 'TARGET_HOSTS', choices: ['prod_weblogic_win', 'prod_weblogic_medgo', 'prod_weblogic_batch', 'prod_weblogic_external_reports'], description: 'Target host group from inventory')
        booleanParam(name: 'DRY_RUN', defaultValue: false, description: 'Run in check mode (dry run) - preview changes without making them')
        booleanParam(name: 'VERBOSE', defaultValue: true, description: 'Enable verbose output for detailed logging')
        booleanParam(name: 'HOST_BY_HOST', defaultValue: true, description: 'Execute host by host with user confirmation for each host')
    }

    stages {
        stage('Validate Parameters') {
            steps {
                script {
                    // Validate required parameters
                    def requiredParams = [
                        'OLD_JAVA_VERSION', 'NEW_JAVA_VERSION', 'JAVA_INSTALLER',
                        'JAVA_INSTALL_DIR', 'ORACLE_HOME', 'BACKUP_DIR', 'JAVA_SOURCE_DIR'
                    ]

                    requiredParams.each { param ->
                        if (!params[param]?.trim()) {
                            error "Parameter ${param} is required! Please provide a value."
                        }
                    }

                    echo "‚úÖ All required parameters provided:"
                    requiredParams.each { param ->
                        echo "   ${param}: ${params[param]}"
                    }
                }
            }
        }

        stage('Pre-Execution Summary') {
            steps {
                script {
                    echo """
                    ===== PRE-EXECUTION SUMMARY =====
                    üéØ Target Environment: PROD
                    ‚òï Java Version Update: ${params.OLD_JAVA_VERSION} ‚Üí ${params.NEW_JAVA_VERSION}
                    üñ•Ô∏è  Target Hosts: ${params.TARGET_HOSTS}
                    üè† Oracle Home: ${params.ORACLE_HOME}
                    üíæ Backup Directory: ${params.BACKUP_DIR}
                    üì¶ Java Installer: ${params.JAVA_INSTALLER}
                    üìÅ Java Source Dir: ${params.JAVA_SOURCE_DIR}
                    üîç Dry Run Mode (TEST MODE): ${params.DRY_RUN ? 'ENABLED' : 'DISABLED'}
                    üìä Verbose Output: ${params.VERBOSE ? 'ENABLED' : 'DISABLED'}
                    üö¶ Host-by-Host Execution: ${params.HOST_BY_HOST ? 'ENABLED' : 'DISABLED'}
                    =================================
                    """
                }
            }
        }

        stage('Get Host List') {
            steps {
                script {
                    // Get the list of hosts in the target group
                    def hostList = sh(
                        script: "ansible -i inventory ${params.TARGET_HOSTS} --list-hosts",
                        returnStdout: true
                    ).trim()

                    // Parse the host list (remove group name and clean up)
                    def hosts = hostList.split('\n').findAll { it.trim() && !it.contains('hosts') }.collect { it.trim() }

                    echo "üìã Hosts in group '${params.TARGET_HOSTS}':"
                    hosts.eachWithIndex { host, index ->
                        echo "   ${index + 1}. ${host}"
                    }

                    // Store hosts in environment variable for other stages
                    env.HOST_LIST = hosts.join(',')
                    env.TOTAL_HOSTS = hosts.size().toString()
                    env.CURRENT_HOST_INDEX = '0'

                    echo "üöÄ Total hosts to process: ${env.TOTAL_HOSTS}"
                }
            }
        }

        stage('Execute WebLogic Upgrade - Host by Host') {
            when {
                expression { params.HOST_BY_HOST == true }
            }
            steps {
                script {
                    def hosts = env.HOST_LIST.split(',')
                    def totalHosts = hosts.size()

                    echo "üîÑ Starting host-by-host execution for ${totalHosts} hosts..."

                    hosts.eachWithIndex { host, index ->
                        def currentHostIndex = index + 1
                        env.CURRENT_HOST_INDEX = currentHostIndex.toString()

                        echo """
                        ===== PROCESSING HOST ${currentHostIndex}/${totalHosts} =====
                        üñ•Ô∏è  Target Host: ${host}
                        üìç Progress: ${currentHostIndex}/${totalHosts}
                        ‚òï Java Update: ${params.OLD_JAVA_VERSION} ‚Üí ${params.NEW_JAVA_VERSION}
                        ‚è∞ Start Time: ${new Date().format("yyyy-MM-dd HH:mm:ss")}
                        =========================================
                        """

                        // User confirmation for each host (except first one)
                        if (currentHostIndex > 1) {
                            input message: "Ready to proceed with host ${currentHostIndex}/${totalHosts}: ${host}?",
                                  ok: "Proceed with ${host}"
                        }

                        // Execute Java upgrade for current host
                        def checkMode = params.DRY_RUN ? '--check' : ''
                        def verboseFlag = params.VERBOSE ? '-vv' : ''

                        def ansibleCmd = """
                            ansible-playbook -i inventory yml/prod/weblogic/upgrade_Java_weblogic.yml \\
                              -e "old_java_version='${params.OLD_JAVA_VERSION}'" \\
                              -e "new_java_version='${params.NEW_JAVA_VERSION}'" \\
                              -e "java_installer='${params.JAVA_INSTALLER}'" \\
                              -e "java_install_dir='${params.JAVA_INSTALL_DIR}'" \\
                              -e "oracle_home='${params.ORACLE_HOME}'" \\
                              -e "backup_dir='${params.BACKUP_DIR}'" \\
                              -e "java_source_dir='${params.JAVA_SOURCE_DIR}'" \\
                              --limit ${host} \\
                              ${checkMode} \\
                              ${verboseFlag}
                        """.stripIndent()

                        echo "üöÄ Executing Java upgrade for ${host}:"
                        echo ansibleCmd

                        try {
                            sh ansibleCmd
                            echo "‚úÖ Java upgrade completed successfully for ${host}"
                        } catch (Exception e) {
                            echo "‚ùå Java upgrade failed for ${host}"
                            echo "Error: ${e.getMessage()}"

                            // Ask user if they want to continue with next host
                            if (currentHostIndex < totalHosts) {
                                def continueExecution = input message: "Java upgrade failed for ${host}. Do you want to continue with the next host?",
                                                           ok: "Continue with next host",
                                                           submitter: "Continue",
                                                           submitterParameter: "continue"

                                if (continueExecution != "continue") {
                                    error "Execution stopped by user after failure on ${host}"
                                }
                            } else {
                                error "Java upgrade failed for the last host: ${host}"
                            }
                        }

                        // Show progress
                        echo """
                        ===== HOST ${currentHostIndex}/${totalHosts} COMPLETED =====
                        üñ•Ô∏è  Host: ${host}
                        üìç Progress: ${currentHostIndex}/${totalHosts}
                        ‚òï Java Update: ${params.OLD_JAVA_VERSION} ‚Üí ${params.NEW_JAVA_VERSION}
                        ‚è∞ Completion Time: ${new Date().format("yyyy-MM-dd HH:mm:ss")}
                        =========================================
                        """

                        // Pause between hosts (except for the last one)
                        if (currentHostIndex < totalHosts) {
                            echo "‚è∏Ô∏è  Pausing before next host..."
                            sleep 5
                        }
                    }

                    echo "üéâ All hosts processed successfully!"
                }
            }
        }

        stage('Execute WebLogic Upgrade - All Hosts') {
            when {
                expression { params.HOST_BY_HOST == false }
            }
            steps {
                script {
                    echo "üöÄ Executing Java upgrade for all hosts in parallel..."

                    def checkMode = params.DRY_RUN ? '--check' : ''
                    def verboseFlag = params.VERBOSE ? '-vv' : ''

                    def ansibleCmd = """
                        ansible-playbook -i inventory yml/prod/weblogic/upgrade_Java_weblogic.yml \\
                          -e "old_java_version='${params.OLD_JAVA_VERSION}'" \\
                          -e "new_java_version='${params.NEW_JAVA_VERSION}'" \\
                          -e "java_installer='${params.JAVA_INSTALLER}'" \\
                          -e "java_install_dir='${params.JAVA_INSTALL_DIR}'" \\
                          -e "oracle_home='${params.ORACLE_HOME}'" \\
                          -e "backup_dir='${params.BACKUP_DIR}'" \\
                          -e "java_source_dir='${params.JAVA_SOURCE_DIR}'" \\
                          --limit ${params.TARGET_HOSTS} \\
                          ${checkMode} \\
                          ${verboseFlag}
                    """.stripIndent()

                    echo "üöÄ Executing Ansible command:"
                    echo ansibleCmd

                    if (params.DRY_RUN) {
                        echo "‚ö†Ô∏è  DRY RUN MODE: No actual changes will be made!"
                    }

                    sh ansibleCmd
                }
            }
        }

        stage('Post-Execution Summary') {
            steps {
                script {
                    def executionStatus = params.DRY_RUN ? "DRY RUN COMPLETED" : "WEBLOGIC UPGRADE COMPLETED"
                    def executionMode = params.HOST_BY_HOST ? "Host-by-Host" : "All Hosts Parallel"

                    echo """
                    ===== ${executionStatus} =====
                    ‚òï Old Java Version: ${params.OLD_JAVA_VERSION}
                    üÜï New Java Version: ${params.NEW_JAVA_VERSION}
                    üñ•Ô∏è  Target Hosts: ${params.TARGET_HOSTS}
                    üè† Oracle Home: ${params.ORACLE_HOME}
                    üíæ Backup Directory: ${params.BACKUP_DIR}
                    üì¶ Java Installer: ${params.JAVA_INSTALLER}
                    üìÅ Java Source Dir: ${params.JAVA_SOURCE_DIR}
                    üö¶ Execution Mode: ${executionMode}
                    üìä Total Hosts Processed: ${env.TOTAL_HOSTS ?: 'N/A'}
                    ‚è∞ Execution Time: ${new Date().format("yyyy-MM-dd HH:mm:ss")}
                    =========================================
                    """
                }
            }
        }
    }

    post {
        always {
            echo "üèÅ WebLogic upgrade pipeline completed"
            echo "üìä Final Status:"
            echo "   - Total Hosts: ${env.TOTAL_HOSTS ?: 'N/A'}"
            echo "   - Execution Mode: ${params.HOST_BY_HOST ? 'Host-by-Host' : 'All Hosts Parallel'}"
            echo "   - Dry Run: ${params.DRY_RUN ? 'Yes' : 'No'}"
        }
        success {
            if (params.DRY_RUN) {
                echo "‚úÖ WebLogic upgrade dry run completed successfully!"
                echo "üìã Review the output above to see what changes would be made"
                echo "üîÑ To execute actual changes, run the pipeline again with DRY_RUN=false"
            } else {
                echo "‚úÖ WebLogic upgrade completed successfully!"
                echo "üíæ All WebLogic files have been backed up"
                echo "‚òï Java has been upgraded from ${params.OLD_JAVA_VERSION} to ${params.NEW_JAVA_VERSION}"
                echo "üåê WebLogic configuration files have been updated"

                if (params.HOST_BY_HOST) {
                    echo "üö¶ Host-by-host execution completed with user control"
                }
            }
        }
        failure {
            echo "‚ùå WebLogic upgrade failed!"
            echo "üîç Check the console output above for error details"
            echo "üìã Verify all parameters are correct"
            echo "üñ•Ô∏è  Ensure target hosts are accessible"

            if (params.HOST_BY_HOST) {
                echo "üö¶ Host-by-host execution was interrupted"
                echo "üìä Progress: ${env.CURRENT_HOST_INDEX ?: 'Unknown'}/${env.TOTAL_HOSTS ?: 'Unknown'} hosts completed"
            }
        }
    }
}
