---
- name: Backup, Replace WebLogic Files, Uninstall & Install Java on Windows Server - SIT Environment
  hosts: sit_weblogic_win
  gather_facts: no
  
  vars:
    # Configurable paths - can be overridden per environment
    oracle_home: "E:\\Oracle\\Middleware\\Oracle_Home"
    backup_dir: "E:\\Oracle\\backup"
    java_source_dir: "E:\\Java_source"
    java_install_dir: "E:\\jdk1.8.0_441"
    java_installer: "jdk-8u441-windows-x64.exe"
    
    # WebLogic domain configuration
    weblogic_domain: "base_domain"
    
    # Source files on Ansible server
    ansible_source_dir: "/home/appadmin/Upgrade_weblogic_files"
    
  tasks:
    ### Ensure Backup Directory Exists
    - name: Create Backup Directory
      win_file:
        path: "{{ backup_dir }}"
        state: directory

    ### Define WebLogic Files for Backup
    - name: Set File Backup List
      set_fact:
        files_to_backup:
          - path: "{{ oracle_home }}\\oui\\.globalEnv.properties"
            description: "Oracle Global Environment Properties"
          - path: "{{ oracle_home }}\\user_projects\\domains\\{{ weblogic_domain }}\\nodemanager\\nodemanager.properties"
            description: "Node Manager Properties"
          - path: "{{ oracle_home }}\\user_projects\\domains\\{{ weblogic_domain }}\\bin\\setNMJavaHome.cmd"
            description: "Node Manager Java Home Script"
          - path: "{{ oracle_home }}\\user_projects\\domains\\{{ weblogic_domain }}\\bin\\setDomainEnv.cmd"
            description: "Domain Environment Script"

    ### Backup WebLogic Configuration Files
    - name: Backup WebLogic Files with Timestamp
      win_shell: |
        $filePath = "{{ item.path }}"
        $backupDir = "{{ backup_dir }}"
        $timestamp = Get-Date -Format 'yyyyMMddHHmmss'
        $fileName = [System.IO.Path]::GetFileName($filePath)
        $backupFile = "$backupDir\$fileName`_$timestamp"
        
        If (Test-Path $filePath) {
            Copy-Item -Path $filePath -Destination $backupFile
            Write-Output "Backup created at $backupFile"
        } else {
            Write-Output "No existing file to backup: $filePath"
        }
      args:
        executable: powershell
      loop: "{{ files_to_backup }}"
      register: backup_results

    - name: Display Backup Status
      debug:
        msg: "{{ backup_results.results | map(attribute='stdout_lines') | list }}"

    ### Copy New WebLogic Configuration Files
    - name: Copy New WebLogic Files from Ansible Server
      win_copy:
        src: "{{ ansible_source_dir }}/{{ item.src }}"
        dest: "{{ item.dest }}"
        remote_src: no
      loop:
        - { src: ".globalEnv.properties", dest: "{{ oracle_home }}\\oui\\.globalEnv.properties" }
        - { src: "nodemanager.properties", dest: "{{ oracle_home }}\\user_projects\\domains\\{{ weblogic_domain }}\\nodemanager\\nodemanager.properties" }
        - { src: "setNMJavaHome.cmd", dest: "{{ oracle_home }}\\user_projects\\domains\\{{ weblogic_domain }}\\bin\\setNMJavaHome.cmd" }
        - { src: "setDomainEnv.cmd", dest: "{{ oracle_home }}\\user_projects\\domains\\{{ weblogic_domain }}\\bin\\setDomainEnv.cmd" }
      register: copy_results

    - name: Display Copy Results
      debug:
        msg: "{{ copy_results }}"

    ### Uninstall Existing Java (Safe, Tolerant)
    - name: Uninstall existing Java versions
      win_shell: |
        $apps = Get-WmiObject -Class Win32_Product | Where-Object {
          $_.Name -like "Java*" -or $_.Name -like "*JDK*"
        }

        foreach ($app in $apps) {
          Write-Output "Uninstalling: $($app.Name)"
          try {
            $null = $app.Uninstall()
          } catch {
            Write-Output "Failed to uninstall $($app.Name): $($_.Exception.Message)"
          }
        }

        if (-not $apps) {
          Write-Output "No existing Java installations found."
        }
      args:
        executable: powershell
      register: uninstall_java_result
      ignore_errors: true

    - name: Display Java Uninstall Results
      debug:
        msg: "{{ uninstall_java_result.stdout_lines }}"

    ### Kill All Java Processes Before Installation
    - name: Kill all running Java processes
      win_shell: |
        $javaProcs = Get-Process java -ErrorAction SilentlyContinue
        if ($javaProcs) {
          Stop-Process -Name java -Force
          Write-Output "Java processes killed."
        } else {
          Write-Output "No Java processes running."
        }
      args:
        executable: powershell
      register: kill_java_result

    - name: Display Java Kill Result
      debug:
        msg: "{{ kill_java_result.stdout_lines }}"

    ### Copy Java Installer to Windows Server
    - name: Copy Java Installer to Windows Server
      win_copy:
        src: "{{ ansible_source_dir }}/{{ java_installer }}"
        dest: "{{ java_source_dir }}\\{{ java_installer }}"

    ### Install Java JDK
    - name: Install Java JDK
      win_shell: "{{ java_source_dir }}\\{{ java_installer }} /s INSTALLDIR={{ java_install_dir }}"
      args:
        chdir: "{{ java_source_dir }}"

    ### Set JAVA_HOME Environment Variable
    - name: Set JAVA_HOME Environment Variable
      win_environment:
        name: JAVA_HOME
        value: "{{ java_install_dir }}"
        level: machine

    ### Add Java to System PATH
    - name: Add Java to System PATH
      win_path:
        elements:
          - "{{ java_install_dir }}\\bin"

    ### Get WebLogic Version Using Installed Java
    - name: Get WebLogic Version
      win_shell: |
        $env:JAVA_HOME = "{{ java_install_dir }}"
        $env:PATH = "$env:JAVA_HOME\bin;$env:PATH"
        & "$env:JAVA_HOME\bin\java.exe" -cp "{{ oracle_home }}\wlserver\server\lib\weblogic.jar" weblogic.version
      register: weblogic_version_output

    - name: Display WebLogic Version
      debug:
        msg: "{{ weblogic_version_output.stdout_lines }}"

    ### Verify Java Installation
    - name: Verify Java Installation
      win_shell: |
        $env:JAVA_HOME = "{{ java_install_dir }}"
        $env:PATH = "$env:JAVA_HOME\bin;$env:PATH"
        & "$env:JAVA_HOME\bin\java.exe" -version
      register: java_version_output

    - name: Display Java Version
      debug:
        msg: "{{ java_version_output.stdout_lines }}"
